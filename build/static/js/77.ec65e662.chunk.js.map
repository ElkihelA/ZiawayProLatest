{"version":3,"sources":["app/views/app/task-manager/todo/TodoItem.jsx","app/views/app/task-manager/todo/todoService.js","app/views/app/task-manager/todo/TodoList.jsx","app/views/app/task-manager/todo/TagDialog.jsx","app/views/app/task-manager/todo/TodoEditor.jsx","app/views/app/task-manager/todo/AppTodo.jsx"],"names":["TodoItem","todo","tag","tagList","updateTodo","dragHandleProps","Card","className","as","to","id","size","title","note","map","tagId","index","find","name","key","onClick","important","starred","Dropdown","alignRight","Toggle","Menu","type","checked","done","onChange","read","reorderTodoList","todoList","axios","post","addTodo","updateTodoById","deleteTodo","getAllTodoTag","get","addNewTag","deleteTag","TodoList","state","search","query","toLowerCase","filteredTodoList","filter","match","setState","then","data","reorder","list","startIndex","endIndex","result","Array","from","splice","removed","handleDragEnd","destination","source","filterTodoListByProperty","queryField","queryValue","filterTodoListByTag","includes","this","props","setSearchFunction","Item","Button","variant","history","push","onDragEnd","droppableId","provided","snapshot","droppableProps","ref","innerRef","draggableId","toString","draggableProps","style","placeholder","Component","TagDialog","handleChange","event","handleAddNewTag","target","value","trim","generateRandomId","reloadTagList","handleDeleteTag","open","handleClose","Modal","onHide","show","FormControl","onKeyDown","onClickCapture","TodoEditor","startDate","Date","dueDate","shouldOpenTagDialog","addNewTodo","values","addTagInTodo","handleTagDelete","handleTodoDelete","handleSubmit","params","handleTagDialogToggle","todoId","getTodoById","tagIdList","fontSize","tagName","initialValues","validationSchema","todoSchema","enableReinitialize","onSubmit","errors","touched","handleBlur","setFieldValue","isSubmitting","FormGroup","FormLabel","label","onBlur","isInvalid","dateFormat","placeholderText","selected","date","yup","shape","required","AppTodo","handleQueryChange","path","component","exact","render","searchFunction"],"mappings":"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","file":"static/js/77.ec65e662.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Card, Button, Dropdown } from \"react-bootstrap\";\r\nimport { Link } from \"react-router-dom\";\r\nimport {\r\n  MdOpenWith,\r\n  MdMoreVert,\r\n  MdError,\r\n  MdErrorOutline,\r\n  MdStar,\r\n  MdStarBorder\r\n} from \"react-icons/md\";\r\n\r\nconst TodoItem = ({\r\n  todo = { tag: [] },\r\n  tagList,\r\n  updateTodo,\r\n  dragHandleProps\r\n}) => {\r\n  return (\r\n    <Card className=\"rounded-0\">\r\n      <div className=\"d-flex align-items-center flex-wrap px-3 py-4\">\r\n        <Link\r\n          as=\"div\"\r\n          to={`/todo/list/${todo.id}`}\r\n          className=\"d-flex align-items-center flex-grow-1\"\r\n          {...dragHandleProps}\r\n        >\r\n          <MdOpenWith className=\"cursor-move\" size={24}></MdOpenWith>\r\n          <div className=\"ml-3\">\r\n            <p className=\"m-0 mb-12\">{todo.title}</p>\r\n            <p className=\"m-0 mb-12\">{todo.note}</p>\r\n            {todo.tag.map((tagId, index) => {\r\n              let tagName = (tagList.find(tag => tag.id === tagId) || {}).name;\r\n              if (!tagName) return null;\r\n              else {\r\n                return (\r\n                  <div\r\n                    key={index}\r\n                    className=\"mr-12 badge badge-pill bg-gray-400 text-13 p-2\"\r\n                  >\r\n                    {tagList.find(tag => tag.id === tagId).name}\r\n                  </div>\r\n                );\r\n              }\r\n            })}\r\n          </div>\r\n        </Link>\r\n\r\n        <div className=\"d-flex flex-wrap align-items-center\">\r\n          <div\r\n            className=\"p-2 btn-hover rounded-circle\"\r\n            onClick={() => updateTodo({ ...todo, important: !todo.important })}\r\n          >\r\n            {todo.important ? (\r\n              <MdError\r\n                className=\"text-danger cursor-pointer\"\r\n                size={24}\r\n              ></MdError>\r\n            ) : (\r\n              <MdErrorOutline\r\n                className=\"cursor-pointer\"\r\n                size={24}\r\n              ></MdErrorOutline>\r\n            )}\r\n          </div>\r\n          <div\r\n            className=\"p-2 btn-hover rounded-circle\"\r\n            onClick={() => updateTodo({ ...todo, starred: !todo.starred })}\r\n          >\r\n            {todo.starred ? (\r\n              <MdStar\r\n                className=\"text-warning cursor-pointer\"\r\n                size={24}\r\n              ></MdStar>\r\n            ) : (\r\n              <MdStarBorder className=\"cursor-pointer\" size={24}></MdStarBorder>\r\n            )}\r\n          </div>\r\n          <Dropdown alignRight>\r\n            <Dropdown.Toggle as=\"span\" className=\"cursor-pointer toggle-hidden\">\r\n              <div className=\"p-2 btn-hover rounded-circle\">\r\n                <MdMoreVert size={24}></MdMoreVert>\r\n              </div>\r\n            </Dropdown.Toggle>\r\n            <Dropdown.Menu>\r\n              <div className=\"py-2 px-2\">\r\n                <label className=\"checkbox checkbox-primary mb-0\">\r\n                  <input\r\n                    type=\"checkbox\"\r\n                    name=\"agree\"\r\n                    checked={todo.done}\r\n                    onChange={() => updateTodo({ ...todo, done: !todo.done })}\r\n                  />\r\n                  <span>{`Mark As ${todo.done ? \"Und\" : \"D\"}one`}</span>\r\n                  <span className=\"checkmark\"></span>\r\n                </label>\r\n              </div>\r\n              <div className=\"py-2 px-2\">\r\n                <label className=\"checkbox checkbox-primary mb-0\">\r\n                  <input\r\n                    type=\"checkbox\"\r\n                    name=\"agree\"\r\n                    checked={todo.read}\r\n                    onChange={() => updateTodo({ ...todo, read: !todo.read })}\r\n                  />\r\n                  <span>{`Mark As ${todo.read ? \"Unr\" : \"R\"}ead`}</span>\r\n                  <span className=\"checkmark\"></span>\r\n                </label>\r\n              </div>\r\n            </Dropdown.Menu>\r\n          </Dropdown>\r\n        </div>\r\n      </div>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default TodoItem;\r\n","import axios from \"axios\";\r\n\r\nexport const getAllTodo = () => {\r\n  return axios.get(\"/api/todo/all\");\r\n};\r\n\r\nexport const getTodoById = todoId => {\r\n  return axios.get(\"/api/todo\", { data: todoId });\r\n};\r\n\r\nexport const reorderTodoList = todoList => {\r\n  return axios.post(\"/api/todo/reorder\", { todoList });\r\n};\r\n\r\nexport const addTodo = todo => {\r\n  return axios.post(\"/api/todo/add\", { todo });\r\n};\r\n\r\nexport const updateTodoById = todo => {\r\n  return axios.post(\"/api/todo/update\", { todo });\r\n};\r\n\r\nexport const deleteTodo = todo => {\r\n  return axios.post(\"/api/todo/delete\", { todo });\r\n};\r\n\r\n// tag management\r\n\r\nexport const getAllTodoTag = () => {\r\n  return axios.get(\"/api/todo/tag\");\r\n};\r\n\r\nexport const addNewTag = tag => {\r\n  return axios.post(\"/api/todo/tag/add\", { tag });\r\n};\r\n\r\nexport const deleteTag = tag => {\r\n  return axios.post(\"/api/todo/tag/delete\", { tag });\r\n};\r\n","import React, { Component } from \"react\";\r\nimport TodoItem from \"./TodoItem\";\r\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\r\nimport {\r\n  getAllTodo,\r\n  updateTodoById,\r\n  reorderTodoList,\r\n  getAllTodoTag\r\n} from \"./todoService\";\r\nimport { Button, Card, Dropdown } from \"react-bootstrap\";\r\nimport { MdArrowDropDown, MdLabel } from \"react-icons/md\";\r\n\r\nclass TodoList extends Component {\r\n  todoList = [];\r\n  state = {\r\n    tagList: [],\r\n    todoList: []\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.props.setSearchFunction(this.search);\r\n    getAllTodo().then(({ data }) => {\r\n      getAllTodoTag().then(({ data: tagList }) => {\r\n        this.setState({\r\n          tagList,\r\n          todoList: [...data]\r\n        });\r\n        this.todoList = [...data];\r\n      });\r\n    });\r\n  }\r\n\r\n  search = query => {\r\n    query = query.toLowerCase();\r\n    let filteredTodoList = this.todoList.filter(\r\n      todo =>\r\n        todo.title.toLowerCase().match(query) ||\r\n        todo.note.toLowerCase().match(query)\r\n    );\r\n    this.setState({\r\n      todoList: [...filteredTodoList]\r\n    });\r\n  };\r\n\r\n  updateTodo = todo => {\r\n    updateTodoById(todo).then(({ data }) => {\r\n      this.setState({\r\n        todoList: [...data]\r\n      });\r\n      this.todoList = [...data];\r\n    });\r\n  };\r\n\r\n  reorder = (list, startIndex, endIndex) => {\r\n    const result = Array.from(list);\r\n    const [removed] = result.splice(startIndex, 1);\r\n    result.splice(endIndex, 0, removed);\r\n\r\n    return result;\r\n  };\r\n\r\n  handleDragEnd = result => {\r\n    // dropped outside the list\r\n    if (!result.destination) {\r\n      return;\r\n    }\r\n\r\n    let todoList = this.reorder(\r\n      this.state.todoList,\r\n      result.source.index,\r\n      result.destination.index\r\n    );\r\n\r\n    reorderTodoList(todoList).then(({ data }) => {\r\n      this.setState({\r\n        todoList: [...data]\r\n      });\r\n      this.todoList = [...data];\r\n    });\r\n  };\r\n\r\n  filterTodoListByProperty = (queryField, queryValue) => {\r\n    if (queryField !== \"all\") {\r\n      this.setState({\r\n        todoList: [\r\n          ...this.todoList.filter(todo => todo[queryField] === queryValue)\r\n        ]\r\n      });\r\n    } else {\r\n      this.setState({\r\n        todoList: [...this.todoList]\r\n      });\r\n    }\r\n  };\r\n\r\n  filterTodoListByTag = tagId => {\r\n    if (tagId !== \"all\")\r\n      this.setState({\r\n        todoList: [...this.todoList.filter(todo => todo.tag.includes(tagId))]\r\n      });\r\n    else {\r\n      this.setState({\r\n        todoList: [...this.todoList]\r\n      });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    let { todoList, tagList } = this.state;\r\n\r\n    return (\r\n      <Card className=\"todo position-relative\">\r\n        <div className=\"todo-list__topbar card-header py-2 d-flex flex-wrap justify-content-between align-items-center\">\r\n          <div className=\"d-flex ml-3\">\r\n            <Dropdown>\r\n              <Dropdown.Toggle\r\n                as=\"span\"\r\n                className=\"toggle-hidden cursor-pointer\"\r\n              >\r\n                <div className=\"p-2 btn-hover rounded-circle\">\r\n                  <MdArrowDropDown size={24}></MdArrowDropDown>\r\n                </div>\r\n              </Dropdown.Toggle>\r\n              <Dropdown.Menu>\r\n                <Dropdown.Item\r\n                  onClick={() => this.filterTodoListByProperty(\"all\")}\r\n                >\r\n                  All\r\n                </Dropdown.Item>\r\n                <Dropdown.Item\r\n                  onClick={() => this.filterTodoListByProperty(\"read\", true)}\r\n                >\r\n                  Read\r\n                </Dropdown.Item>\r\n                <Dropdown.Item\r\n                  onClick={() => this.filterTodoListByProperty(\"read\", false)}\r\n                >\r\n                  Unread\r\n                </Dropdown.Item>\r\n                <Dropdown.Item\r\n                  onClick={() => this.filterTodoListByProperty(\"done\", true)}\r\n                >\r\n                  Done\r\n                </Dropdown.Item>\r\n                <Dropdown.Item\r\n                  onClick={() => this.filterTodoListByProperty(\"done\", false)}\r\n                >\r\n                  Undone\r\n                </Dropdown.Item>\r\n                <Dropdown.Item\r\n                  onClick={() =>\r\n                    this.filterTodoListByProperty(\"important\", true)\r\n                  }\r\n                >\r\n                  Important\r\n                </Dropdown.Item>\r\n                <Dropdown.Item\r\n                  onClick={() =>\r\n                    this.filterTodoListByProperty(\"important\", false)\r\n                  }\r\n                >\r\n                  Unimportant\r\n                </Dropdown.Item>\r\n                <Dropdown.Item\r\n                  onClick={() => this.filterTodoListByProperty(\"starred\", true)}\r\n                >\r\n                  Starred\r\n                </Dropdown.Item>\r\n                <Dropdown.Item\r\n                  onClick={() =>\r\n                    this.filterTodoListByProperty(\"starred\", false)\r\n                  }\r\n                >\r\n                  Unstarred\r\n                </Dropdown.Item>\r\n              </Dropdown.Menu>\r\n            </Dropdown>\r\n\r\n            <Dropdown>\r\n              <Dropdown.Toggle\r\n                as=\"span\"\r\n                className=\"toggle-hidden cursor-pointer\"\r\n              >\r\n                <div className=\"p-2 btn-hover rounded-circle\">\r\n                  <MdLabel size={24}></MdLabel>\r\n                </div>\r\n              </Dropdown.Toggle>\r\n              <Dropdown.Menu>\r\n                <Dropdown.Item\r\n                  className=\"text-capitalize\"\r\n                  onClick={() => this.filterTodoListByTag(\"all\")}\r\n                >\r\n                  all\r\n                </Dropdown.Item>\r\n                {tagList.map(tag => (\r\n                  <Dropdown.Item\r\n                    key={tag.id}\r\n                    className=\"text-capitalize\"\r\n                    onClick={() => this.filterTodoListByTag(tag.id)}\r\n                  >\r\n                    {tag.name}\r\n                  </Dropdown.Item>\r\n                ))}\r\n              </Dropdown.Menu>\r\n            </Dropdown>\r\n          </div>\r\n          <div className=\"pr-3\">\r\n            <Button\r\n              variant=\"primary\"\r\n              onClick={() => this.props.history.push(\"/todo/list/add\")}\r\n            >\r\n              Create Todo\r\n            </Button>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"todo-list\">\r\n          <DragDropContext onDragEnd={this.handleDragEnd}>\r\n            <Droppable droppableId=\"droppable\">\r\n              {(provided, snapshot) => (\r\n                <div {...provided.droppableProps} ref={provided.innerRef}>\r\n                  {todoList.map((todo, index) => (\r\n                    <Draggable\r\n                      key={todo.id}\r\n                      draggableId={todo.id.toString()}\r\n                      index={index}\r\n                    >\r\n                      {(provided, snapshot) => (\r\n                        <div\r\n                          ref={provided.innerRef}\r\n                          {...provided.draggableProps}\r\n                          style={provided.draggableProps.style}\r\n                        >\r\n                          <TodoItem\r\n                            tagList={tagList}\r\n                            updateTodo={this.updateTodo}\r\n                            key={index}\r\n                            todo={todo}\r\n                            dragHandleProps={provided.dragHandleProps}\r\n                          />\r\n                        </div>\r\n                      )}\r\n                    </Draggable>\r\n                  ))}\r\n                  {provided.placeholder}\r\n                </div>\r\n              )}\r\n            </Droppable>\r\n          </DragDropContext>\r\n        </div>\r\n      </Card>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TodoList;\r\n","import React, { Component } from \"react\";\r\nimport { Modal, FormControl, Button } from \"react-bootstrap\";\r\nimport { getAllTodoTag, addNewTag, deleteTag } from \"./todoService\";\r\nimport { generateRandomId } from \"@utils\";\r\n\r\nclass TagDialog extends Component {\r\n  state = {\r\n    name: \"\",\r\n    tagList: []\r\n  };\r\n\r\ncomponentDidMount() {\r\n  getAllTodoTag().then(({ data }) => {\r\n    this.setState({\r\n      tagList: [...data]\r\n    });\r\n  });\r\n}\r\n\r\n  handleChange = event => {\r\n    if (event.key === \"Enter\") {\r\n      this.handleAddNewTag();\r\n    } else {\r\n      this.setState({\r\n        name: event.target.value\r\n      });\r\n    }\r\n  };\r\n\r\n  handleAddNewTag = event => {\r\n    let { name } = this.state;\r\n\r\n    if (name.trim() !== \"\")\r\n      addNewTag({\r\n        id: generateRandomId(),\r\n        name: name.trim()\r\n      }).then(({ data }) => {\r\n        this.setState({ tagList: data, name: \"\" });\r\n        this.props.reloadTagList();\r\n      });\r\n  };\r\n\r\n  handleDeleteTag = id => {\r\n    deleteTag({ id, name: this.state.name }).then(({ data }) => {\r\n      this.setState({ tagList: data });\r\n      this.props.reloadTagList();\r\n    });\r\n  };\r\n\r\n  render() {\r\n    let { open, handleClose } = this.props;\r\n    let { tagList, name } = this.state;\r\n\r\n    return (\r\n      <Modal onHide={handleClose} show={open} size=\"sm\">\r\n        <div className=\"px-3 py-4\">\r\n          <div className=\"d-flex align-items-center\">\r\n            <FormControl\r\n              onChange={this.handleChange}\r\n              onKeyDown={this.handleChange}\r\n              value={name}\r\n              className=\"flex-grow-1\"\r\n              placeholder=\"New tag*\"\r\n            />\r\n            <div>\r\n              <Button\r\n                onClick={this.handleAddNewTag}\r\n                className=\"\"\r\n                variant=\"primary\"\r\n              >\r\n                Add\r\n              </Button>\r\n            </div>\r\n          </div>\r\n          <div className=\"pt-3\">\r\n            {tagList.map((tag, index) => (\r\n              <div\r\n                className=\"d-flex align-items-center justify-content-between my-2\"\r\n                key={tag.id}\r\n              >\r\n                <span>{index + 1}</span>\r\n                <span className=\"text-capitalize\">{tag.name}</span>\r\n                <Button\r\n                  onClickCapture={() => this.handleDeleteTag(tag.id)}\r\n                  variant=\"danger\"\r\n                >\r\n                  Delete\r\n                </Button>\r\n              </div>\r\n            ))}\r\n          </div>\r\n          <div className=\"pt-3 text-right\">\r\n            <Button onClick={handleClose} variant=\"outline-danger\">\r\n              Close\r\n            </Button>\r\n          </div>\r\n        </div>\r\n      </Modal>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TagDialog;\r\n","import React, { Component } from \"react\";\r\nimport {\r\n  Card,\r\n  Button,\r\n  Dropdown,\r\n  FormControl,\r\n  FormGroup,\r\n  FormLabel\r\n} from \"react-bootstrap\";\r\nimport { Link } from \"react-router-dom\";\r\nimport {\r\n  getTodoById,\r\n  getAllTodoTag,\r\n  updateTodoById,\r\n  deleteTodo,\r\n  addTodo\r\n} from \"./todoService\";\r\nimport DatePicker from \"react-datepicker\";\r\nimport { Formik } from \"formik\";\r\nimport * as yup from \"yup\";\r\nimport {\r\n  MdArrowBack,\r\n  MdDrafts,\r\n  MdMarkunread,\r\n  MdError,\r\n  MdErrorOutline,\r\n  MdStar,\r\n  MdStarBorder,\r\n  MdLibraryAdd,\r\n  MdLabel,\r\n  MdDelete,\r\n  MdClose\r\n} from \"react-icons/md\";\r\nimport { GullTooltip } from \"@gull\";\r\nimport TagDialog from \"./TagDialog\";\r\n\r\nclass TodoEditor extends Component {\r\n  state = {\r\n    todo: {\r\n      title: \"\",\r\n      note: \"\",\r\n      done: false,\r\n      read: false,\r\n      starred: false,\r\n      important: false,\r\n      startDate: new Date(),\r\n      dueDate: new Date(),\r\n      tag: []\r\n    },\r\n    tagList: [],\r\n    shouldOpenTagDialog: false\r\n  };\r\n\r\n  componentDidMount() {\r\n    let { id: todoId } = this.props.match.params;\r\n\r\n    getAllTodoTag().then(({ data: tagList }) => {\r\n      if (todoId !== \"add\") {\r\n        getTodoById(todoId).then(({ data }) => {\r\n          if (!data) {\r\n            this.props.history.push(\"/todo/list\");\r\n            return;\r\n          }\r\n          this.setState({\r\n            todo: { ...data },\r\n            tagList: [...tagList]\r\n          });\r\n        });\r\n      } else {\r\n        this.setState({\r\n          tagList\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  addNewTodo = values => {\r\n    addTodo({ ...values }).then(() => {\r\n      this.props.history.push(\"/todo/list\");\r\n    });\r\n  };\r\n\r\n  updateTodo = todo => {\r\n    updateTodoById(todo);\r\n    this.setState({\r\n      todo: {\r\n        ...this.state.todo,\r\n        ...todo\r\n      }\r\n    });\r\n  };\r\n\r\n  reloadTagList = () => {\r\n    getAllTodoTag().then(({ data }) => {\r\n      this.setState({\r\n        tagList: [...data]\r\n      });\r\n    });\r\n  };\r\n\r\n  addTagInTodo = id => {\r\n    let { tag } = this.state.todo;\r\n    if (!tag.includes(id)) {\r\n      tag.push(id);\r\n      this.setState({\r\n        todo: {\r\n          ...this.state.todo,\r\n          tag\r\n        }\r\n      });\r\n    }\r\n  };\r\n\r\n  handleTagDelete = tagId => {\r\n    let { tag: tagList = [] } = this.state.todo;\r\n    tagList = tagList.filter(id => id !== tagId);\r\n    this.setState(\r\n      {\r\n        todo: {\r\n          ...this.state.todo,\r\n          tag: [...tagList]\r\n        }\r\n      },\r\n      () => updateTodoById({ ...this.state.todo })\r\n    );\r\n  };\r\n\r\n  handleTodoDelete = () => {\r\n    deleteTodo({ ...this.state.todo }).then(() => {\r\n      this.props.history.push(\"/todo/list\");\r\n    });\r\n  };\r\n\r\n  handleSubmit = values => {\r\n    let { id: todoId } = this.props.match.params;\r\n    if (todoId === \"add\") {\r\n      this.addNewTodo(values);\r\n    } else {\r\n      updateTodoById({ ...this.state.todo, ...values }).then(() => {\r\n        this.props.history.push(\"/todo/list\");\r\n      });\r\n    }\r\n  };\r\n\r\n  handleTagDialogToggle = () => {\r\n    this.setState({\r\n      shouldOpenTagDialog: !this.state.shouldOpenTagDialog\r\n    });\r\n  };\r\n\r\n  render() {\r\n    let {\r\n      done,\r\n      read,\r\n      starred,\r\n      important,\r\n      tag: tagIdList = []\r\n    } = this.state.todo;\r\n    let { tagList } = this.state;\r\n\r\n    return (\r\n      <Card className=\"todo-editor position-relative m-sm-30\">\r\n        <div className=\"editor__topbar bg-light-gray p-2 d-flex flex-wrap card-header justify-content-between align-items-center\">\r\n          <div className=\"d-flex flex-wrap align-items-center\">\r\n            <Link to=\"/todo/list\">\r\n              <div className=\"p-2 rounded-circle btn-hover\">\r\n                <MdArrowBack size={24}></MdArrowBack>\r\n              </div>\r\n            </Link>\r\n            <div className=\"ml-4\">\r\n              <label className=\"checkbox checkbox-primary mb-0\">\r\n                <input\r\n                  type=\"checkbox\"\r\n                  name=\"agree\"\r\n                  checked={done}\r\n                  onChange={() =>\r\n                    this.updateTodo({ ...this.state, done: !done })\r\n                  }\r\n                />\r\n                <span>{`Mark As ${done ? \"Und\" : \"D\"}one`}</span>\r\n                <span className=\"checkmark\"></span>\r\n              </label>\r\n            </div>\r\n          </div>\r\n          <div className=\"d-flex flex-wrap\">\r\n            <GullTooltip\r\n              title={`Mark As ${read ? \"Unr\" : \"R\"}ead`}\r\n              fontSize=\"large\"\r\n            >\r\n              <div\r\n                className=\"p-2 rounded-circle btn-hover cursor-pointer mr-2\"\r\n                onClick={() => this.updateTodo({ ...this.state, read: !read })}\r\n              >\r\n                {read ? (\r\n                  <MdDrafts size={24}></MdDrafts>\r\n                ) : (\r\n                  <MdMarkunread size={24}></MdMarkunread>\r\n                )}\r\n              </div>\r\n            </GullTooltip>\r\n\r\n            <GullTooltip\r\n              title={`Mark As ${important ? \"Uni\" : \"I\"}mportant`}\r\n              fontSize=\"large\"\r\n            >\r\n              <div\r\n                className=\"p-2 rounded-circle btn-hover  cursor-pointer mr-2\"\r\n                onClick={() =>\r\n                  this.updateTodo({ ...this.state, important: !important })\r\n                }\r\n              >\r\n                {important ? (\r\n                  <MdError className=\"text-danger\" size={24}></MdError>\r\n                ) : (\r\n                  <MdErrorOutline size={24}></MdErrorOutline>\r\n                )}\r\n              </div>\r\n            </GullTooltip>\r\n\r\n            <GullTooltip\r\n              title={`Mark As ${starred ? \"Uns\" : \"S\"}tarred`}\r\n              fontSize=\"large\"\r\n            >\r\n              <div\r\n                className=\"p-2 rounded-circle btn-hover  cursor-pointer mr-2\"\r\n                onClick={() =>\r\n                  this.updateTodo({ ...this.state, starred: !starred })\r\n                }\r\n              >\r\n                {starred ? (\r\n                  <MdStar className=\"text-warning\" size={24}></MdStar>\r\n                ) : (\r\n                  <MdStarBorder size={24}></MdStarBorder>\r\n                )}\r\n              </div>\r\n            </GullTooltip>\r\n\r\n            <GullTooltip title=\"Manage tags\" fontSize=\"large\">\r\n              <div\r\n                className=\"p-2 rounded-circle btn-hover  cursor-pointer mr-2\"\r\n                onClick={this.handleTagDialogToggle}\r\n              >\r\n                <MdLibraryAdd size={24}></MdLibraryAdd>\r\n              </div>\r\n            </GullTooltip>\r\n\r\n            <Dropdown>\r\n              <Dropdown.Toggle\r\n                as=\"span\"\r\n                className=\"cursor-pointer toggle-hidden\"\r\n              >\r\n                <GullTooltip title=\"Add tags\" fontSize=\"large\">\r\n                  <div className=\"p-2 rounded-circle btn-hover\">\r\n                    <MdLabel size={24}></MdLabel>\r\n                  </div>\r\n                </GullTooltip>\r\n              </Dropdown.Toggle>\r\n              <Dropdown.Menu>\r\n                {this.state.tagList.map(tag => (\r\n                  <Dropdown.Item\r\n                    className=\"text-capitalize\"\r\n                    key={tag.id}\r\n                    onClick={() => this.addTagInTodo(tag.id)}\r\n                  >\r\n                    {tag.name}\r\n                  </Dropdown.Item>\r\n                ))}\r\n              </Dropdown.Menu>\r\n            </Dropdown>\r\n\r\n            <GullTooltip title=\"Delete\" fontSize=\"large\">\r\n              <div\r\n                className=\"p-2 rounded-circle btn-hover  cursor-pointer mr-2\"\r\n                onClick={this.handleTodoDelete}\r\n              >\r\n                <MdDelete size={24}></MdDelete>\r\n              </div>\r\n            </GullTooltip>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"editor__form p-3\">\r\n          <div className=\"my-3\">\r\n            {tagIdList.map(tagId => {\r\n              let tagName = (tagList.find(tag => tag.id === tagId) || {}).name;\r\n              if (!tagName) return null;\r\n              else\r\n                return (\r\n                  <div\r\n                    className=\"badge badge-pill bg-gray-400 text-capitalize mr-2 pl-2\"\r\n                    key={tagId}\r\n                  >\r\n                    <div className=\" d-flex align-items-center\">\r\n                      <span className=\"text-12\">{tagName}</span>\r\n                      <span\r\n                        className=\"p-1 rounded-circle btn-hover\"\r\n                        onClick={() => this.handleTagDelete(tagId)}\r\n                      >\r\n                        <MdClose size=\"18\"></MdClose>\r\n                      </span>\r\n                    </div>\r\n                  </div>\r\n                );\r\n            })}\r\n          </div>\r\n\r\n          <Formik\r\n            initialValues={this.state.todo}\r\n            validationSchema={todoSchema}\r\n            enableReinitialize={true}\r\n            onSubmit={this.handleSubmit}\r\n          >\r\n            {({\r\n              values,\r\n              errors,\r\n              touched,\r\n              handleChange,\r\n              handleBlur,\r\n              handleSubmit,\r\n              isSubmitting,\r\n              setFieldValue\r\n            }) => (\r\n              <form onSubmit={handleSubmit}>\r\n                <FormGroup>\r\n                  <FormLabel>Title</FormLabel>\r\n                  <FormControl\r\n                    className=\"mb-3 w-100\"\r\n                    label=\"Title*\"\r\n                    onChange={handleChange}\r\n                    onBlur={handleBlur}\r\n                    type=\"text\"\r\n                    name=\"title\"\r\n                    value={values.title}\r\n                    isInvalid={errors.title && touched.title}\r\n                  />\r\n                </FormGroup>\r\n\r\n                <FormGroup>\r\n                  <FormLabel>Put your notes</FormLabel>\r\n                  <FormControl\r\n                    as=\"textarea\"\r\n                    className=\"mb-3 w-100\"\r\n                    onChange={handleChange}\r\n                    onBlur={handleBlur}\r\n                    type=\"text\"\r\n                    name=\"note\"\r\n                    value={values.note}\r\n                    isInvalid={errors.note && touched.note}\r\n                  />\r\n                </FormGroup>\r\n\r\n                <div className=\"row mb-3\">\r\n                  <FormGroup className=\"col-4\">\r\n                    <FormLabel className=\"mr-2\">Start date</FormLabel>\r\n                    <DatePicker\r\n                      className=\"form-control\"\r\n                      dateFormat=\"dd/MM/yyyy\"\r\n                      placeholderText=\"Start date\"\r\n                      selected={new Date(values.startDate)}\r\n                      onChange={date => {\r\n                        setFieldValue(\"startDate\", date);\r\n                      }}\r\n                    />\r\n                  </FormGroup>\r\n                  <FormGroup className=\"col-4\">\r\n                    <FormLabel className=\"mr-2\">Due date</FormLabel>\r\n                    <DatePicker\r\n                      className=\"form-control\"\r\n                      dateFormat=\"dd/MM/yyyy\"\r\n                      placeholderText=\"Start date\"\r\n                      selected={new Date(values.dueDate)}\r\n                      onChange={date => {\r\n                        setFieldValue(\"dueDate\", date);\r\n                      }}\r\n                    />\r\n                  </FormGroup>\r\n                </div>\r\n                <Link to=\"/todo/list\">\r\n                  <Button\r\n                    className=\"mr-3\"\r\n                    variant=\"outline-danger\"\r\n                    type=\"button\"\r\n                  >\r\n                    Cancel\r\n                  </Button>\r\n                </Link>\r\n                <Button variant=\"primary\" type=\"submit\">\r\n                  Save\r\n                </Button>\r\n              </form>\r\n            )}\r\n          </Formik>\r\n        </div>\r\n        <TagDialog\r\n          reloadTagList={this.reloadTagList}\r\n          open={this.state.shouldOpenTagDialog}\r\n          handleClose={this.handleTagDialogToggle}\r\n        />\r\n      </Card>\r\n    );\r\n  }\r\n}\r\n\r\nconst todoSchema = yup.object().shape({\r\n  title: yup.string().required(\"title is required\"),\r\n  note: yup.string().required(\"note is required\")\r\n});\r\n\r\nexport default TodoEditor;\r\n","import React, { Component } from \"react\";\r\nimport { Switch, Route } from \"react-router-dom\";\r\nimport TodoList from \"./TodoList\";\r\nimport TodoEditor from \"./TodoEditor\";\r\nimport { MdSearch } from \"react-icons/md\";\r\n\r\nclass AppTodo extends Component {\r\n  search = null;\r\n  state = {\r\n    query: \"\"\r\n  };\r\n\r\n  handleQueryChange = event => {\r\n    this.setState(\r\n      {\r\n        query: event.target.value\r\n      },\r\n      () => {\r\n        if (this.search) this.search(this.state.query);\r\n      }\r\n    );\r\n  };\r\n\r\n  render() {\r\n    let { query } = this.state;\r\n\r\n    return (\r\n      <div className=\"todo\">\r\n        <div className=\"todo__search-box-holder\">\r\n          <div className=\"d-flex flex-column justify-content-start mb-4\">\r\n            <div className=\"todo__search-box d-flex align-items-center pl-2 pr-3\">\r\n              <MdSearch size=\"24\" className=\"text-primary search-icon\">\r\n                search\r\n              </MdSearch>\r\n              <input\r\n                className=\"h-100 pl-5 pr-3 flex-grow-1\"\r\n                type=\"text\"\r\n                name=\"query\"\r\n                value={query}\r\n                onChange={this.handleQueryChange}\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"todo__content\">\r\n          <Switch>\r\n            <Route path=\"/todo/list/:id\" component={TodoEditor} />\r\n            <Route\r\n              exact\r\n              path=\"/todo/list\"\r\n              render={props => (\r\n                <TodoList\r\n                  {...props}\r\n                  setSearchFunction={searchFunction =>\r\n                    (this.search = searchFunction)\r\n                  }\r\n                />\r\n              )}\r\n            />\r\n          </Switch>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AppTodo;\r\n"],"sourceRoot":""}