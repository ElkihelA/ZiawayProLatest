{"version":3,"sources":["../node_modules/react-bootstrap/esm/ProgressBar.js","app/views/ui-kits/progressbar/AppProgressbar.jsx"],"names":["getPercentage","now","min","max","percentage","Math","round","renderProgressBar","_ref","ref","_classNames","label","srOnly","striped","animated","className","style","variant","bsPrefix","props","_objectWithoutPropertiesLoose","React","createElement","_extends","role","classNames","width","ProgressBar","forwardRef","_ref2","isChild","useBootstrapPrefix","children","wrapperProps","map","child","cloneElement","displayName","defaultProps","AppProgressbar","state","variantList","routeSegments","name","path","title","value","key","i","Component"],"mappings":"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","file":"static/js/62.089abd0b.chunk.js","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport classNames from 'classnames';\nimport React, { cloneElement } from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { map } from './ElementChildren';\nvar ROUND_PRECISION = 1000;\n/**\n * Validate that children, if any, are instances of `<ProgressBar>`.\n */\n\nfunction onlyProgressBar(props, propName, componentName) {\n  var children = props[propName];\n\n  if (!children) {\n    return null;\n  }\n\n  var error = null;\n  React.Children.forEach(children, function (child) {\n    if (error) {\n      return;\n    }\n    /**\n     * Compare types in a way that works with libraries that patch and proxy\n     * components like react-hot-loader.\n     *\n     * see https://github.com/gaearon/react-hot-loader#checking-element-types\n     */\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n\n\n    var element = /*#__PURE__*/React.createElement(ProgressBar, null);\n    if (child.type === element.type) return;\n    var childType = child.type;\n    var childIdentifier = /*#__PURE__*/React.isValidElement(child) ? childType.displayName || childType.name || childType : child;\n    error = new Error(\"Children of \" + componentName + \" can contain only ProgressBar \" + (\"components. Found \" + childIdentifier + \".\"));\n  });\n  return error;\n}\n\nvar defaultProps = {\n  min: 0,\n  max: 100,\n  animated: false,\n  isChild: false,\n  srOnly: false,\n  striped: false\n};\n\nfunction getPercentage(now, min, max) {\n  var percentage = (now - min) / (max - min) * 100;\n  return Math.round(percentage * ROUND_PRECISION) / ROUND_PRECISION;\n}\n\nfunction renderProgressBar(_ref, ref) {\n  var _classNames;\n\n  var min = _ref.min,\n      now = _ref.now,\n      max = _ref.max,\n      label = _ref.label,\n      srOnly = _ref.srOnly,\n      striped = _ref.striped,\n      animated = _ref.animated,\n      className = _ref.className,\n      style = _ref.style,\n      variant = _ref.variant,\n      bsPrefix = _ref.bsPrefix,\n      props = _objectWithoutPropertiesLoose(_ref, [\"min\", \"now\", \"max\", \"label\", \"srOnly\", \"striped\", \"animated\", \"className\", \"style\", \"variant\", \"bsPrefix\"]);\n\n  return /*#__PURE__*/React.createElement(\"div\", _extends({\n    ref: ref\n  }, props, {\n    role: \"progressbar\",\n    className: classNames(className, bsPrefix + \"-bar\", (_classNames = {}, _classNames[\"bg-\" + variant] = variant, _classNames[bsPrefix + \"-bar-animated\"] = animated, _classNames[bsPrefix + \"-bar-striped\"] = animated || striped, _classNames)),\n    style: _extends({\n      width: getPercentage(now, min, max) + \"%\"\n    }, style),\n    \"aria-valuenow\": now,\n    \"aria-valuemin\": min,\n    \"aria-valuemax\": max\n  }), srOnly ? /*#__PURE__*/React.createElement(\"span\", {\n    className: \"sr-only\"\n  }, label) : label);\n}\n\nvar ProgressBar = /*#__PURE__*/React.forwardRef(function (_ref2, ref) {\n  var isChild = _ref2.isChild,\n      props = _objectWithoutPropertiesLoose(_ref2, [\"isChild\"]);\n\n  props.bsPrefix = useBootstrapPrefix(props.bsPrefix, 'progress');\n\n  if (isChild) {\n    return renderProgressBar(props, ref);\n  }\n\n  var min = props.min,\n      now = props.now,\n      max = props.max,\n      label = props.label,\n      srOnly = props.srOnly,\n      striped = props.striped,\n      animated = props.animated,\n      bsPrefix = props.bsPrefix,\n      variant = props.variant,\n      className = props.className,\n      children = props.children,\n      wrapperProps = _objectWithoutPropertiesLoose(props, [\"min\", \"now\", \"max\", \"label\", \"srOnly\", \"striped\", \"animated\", \"bsPrefix\", \"variant\", \"className\", \"children\"]);\n\n  return /*#__PURE__*/React.createElement(\"div\", _extends({\n    ref: ref\n  }, wrapperProps, {\n    className: classNames(className, bsPrefix)\n  }), children ? map(children, function (child) {\n    return /*#__PURE__*/cloneElement(child, {\n      isChild: true\n    });\n  }) : renderProgressBar({\n    min: min,\n    now: now,\n    max: max,\n    label: label,\n    srOnly: srOnly,\n    striped: striped,\n    animated: animated,\n    bsPrefix: bsPrefix,\n    variant: variant\n  }, ref));\n});\nProgressBar.displayName = 'ProgressBar';\nProgressBar.defaultProps = defaultProps;\nexport default ProgressBar;","import React, { Component } from \"react\";\r\nimport { Breadcrumb } from \"@gull\";\r\nimport SimpleCard from \"@gull/components/cards/SimpleCard\";\r\nimport { ProgressBar } from \"react-bootstrap\";\r\n\r\nclass AppProgressbar extends Component {\r\n  state = {};\r\n  variantList = [\"primary\", \"success\", \"info\", \"warning\", \"danger\"];\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Breadcrumb\r\n          routeSegments={[\r\n            { name: \"UI Kits\", path: \"/uikits\" },\r\n            { name: \"Progress Bar\" }\r\n          ]}\r\n        ></Breadcrumb>\r\n\r\n        <div className=\"row mb-4\">\r\n          <div className=\"col-md-6 mb-4\">\r\n            <SimpleCard title=\"Basic Progress Bar\">\r\n              {[25, 50, 75, 100].map(value => (\r\n                <ProgressBar\r\n                  key={value}\r\n                  now={value}\r\n                  className=\"mb-3\"\r\n                ></ProgressBar>\r\n              ))}\r\n            </SimpleCard>\r\n          </div>\r\n\r\n          <div className=\"col-md-6\">\r\n            <SimpleCard title=\"Basic Progress Bar With Label\">\r\n              {[25, 50, 75, 100].map(value => (\r\n                <ProgressBar\r\n                  key={value}\r\n                  now={value}\r\n                  label={`${value}%`}\r\n                  className=\"mb-3\"\r\n                ></ProgressBar>\r\n              ))}\r\n            </SimpleCard>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"row mb-4\">\r\n          <div className=\"col-md-6 mb-4\">\r\n            <SimpleCard title=\"Basic Progress Bar With diff. Background\">\r\n              {[10, 25, 50, 75, 100].map((value, i) => (\r\n                <ProgressBar\r\n                  key={value}\r\n                  now={value}\r\n                  variant={this.variantList[i]}\r\n                  className=\"mb-3\"\r\n                ></ProgressBar>\r\n              ))}\r\n            </SimpleCard>\r\n          </div>\r\n\r\n          <div className=\"col-md-6\">\r\n            <SimpleCard title=\"Labeled Progress Bar With diff. background\">\r\n              {[10, 25, 50, 75, 100].map((value, i) => (\r\n                <ProgressBar\r\n                  key={value}\r\n                  now={value}\r\n                  label={`${value}%`}\r\n                  variant={this.variantList[i]}\r\n                  className=\"mb-3\"\r\n                ></ProgressBar>\r\n              ))}\r\n            </SimpleCard>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"row mb-4\">\r\n          <div className=\"col-md-6 mb-4\">\r\n            <SimpleCard title=\"Progress Bar With Multiple bars\">\r\n              <ProgressBar className=\"mb-3\">\r\n                <ProgressBar variant=\"\" now={10} key={1} />\r\n                <ProgressBar variant=\"success\" now={25} key={2} />\r\n                <ProgressBar variant=\"info\" now={50} key={3} />\r\n              </ProgressBar>\r\n              <ProgressBar className=\"mb-3\">\r\n                <ProgressBar variant=\"\" now={20} label=\"20%\" key={1} />\r\n                <ProgressBar variant=\"\" now={35} label=\"35%\" key={2} />\r\n                <ProgressBar variant=\"danger\" now={40} label=\"40%\" key={3} />\r\n              </ProgressBar>\r\n              <ProgressBar className=\"mb-3\">\r\n                <ProgressBar variant=\"success\" now={15} label=\"15%\" key={1} />\r\n                <ProgressBar variant=\"info\" now={25} label=\"25%\" key={2} />\r\n                <ProgressBar variant=\"warning\" now={30} label=\"30%\" key={3} />\r\n              </ProgressBar>\r\n              <ProgressBar className=\"mb-3\">\r\n                <ProgressBar variant=\"warning\" now={20} label=\"20%\" key={1} />\r\n                <ProgressBar variant=\"\" now={20} label=\"20%\" key={2} />\r\n                <ProgressBar variant=\"danger\" now={50} label=\"50%\" key={3} />\r\n              </ProgressBar>\r\n              <ProgressBar className=\"mb-3\">\r\n                <ProgressBar\r\n                  striped\r\n                  variant=\"success\"\r\n                  now={15}\r\n                  label=\"15%\"\r\n                  key={1}\r\n                />\r\n                <ProgressBar\r\n                  striped\r\n                  variant=\"info\"\r\n                  now={25}\r\n                  label=\"25%\"\r\n                  key={2}\r\n                />\r\n                <ProgressBar\r\n                  striped\r\n                  variant=\"warning\"\r\n                  now={30}\r\n                  label=\"30%\"\r\n                  key={3}\r\n                />\r\n              </ProgressBar>\r\n            </SimpleCard>\r\n          </div>\r\n\r\n          <div className=\"col-md-6\">\r\n            <SimpleCard title=\"Striped Progress Bar\">\r\n              {[10, 25, 50, 75, 100].map((value, i) => (\r\n                <ProgressBar\r\n                  key={value}\r\n                  now={value}\r\n                  striped\r\n                  label={`${value}%`}\r\n                  variant={this.variantList[i]}\r\n                  className=\"mb-3\"\r\n                ></ProgressBar>\r\n              ))}\r\n            </SimpleCard>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"row mb-4\">\r\n          <div className=\"col-md-12 mb-4\">\r\n            <SimpleCard title=\"Animated stripes Progress Bar\">\r\n              {[10, 25, 50, 75, 100].map((value, i) => (\r\n                <ProgressBar\r\n                  key={value}\r\n                  now={value}\r\n                  animated\r\n                  striped\r\n                  variant={this.variantList[i]}\r\n                  className=\"mb-3\"\r\n                ></ProgressBar>\r\n              ))}\r\n            </SimpleCard>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AppProgressbar;\r\n"],"sourceRoot":""}