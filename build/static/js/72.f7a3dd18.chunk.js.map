{"version":3,"sources":["app/views/app/chat/chatService.js","app/views/app/chat/ChatSidenav.jsx","app/views/app/chat/EmptyMessage.jsx","app/views/app/chat/ChatContainer.jsx","app/views/app/chat/AppChat.jsx"],"names":["getContactById","id","axios","get","data","getRecentContact","getChatRoomByContactId","currentUser","contactId","sendNewMessage","message","post","ChatSidenav","open","contactList","recentContactList","handleContactClick","toggleSidenav","useState","query","setQuery","className","style","left","onClick","type","placeholder","value","onChange","target","filter","user","name","toLocaleLowerCase","match","map","key","status","src","avatar","alt","format","Date","lastChatTime","getTime","EmptyMessage","height","width","borderRadius","ChatContainer","currentChatRoom","opponentUser","messageList","setBottomRef","handleMessageSend","isMobile","React","setMessage","marginLeft","containerRef","ref","item","ind","getTimeDifference","time","text","cols","rows","e","onKeyUp","event","shiftKey","trim","Button","variant","htmlFor","as","console","log","files","AppChat","state","bottomRef","createRef","updateRecentContactList","then","setState","scrollToBottom","current","scrollIntoView","behavior","chatId","recentListUpdated","scrollTop","setTimeout","currentUserId","this","window","windowResizeListener","addEventListener","removeEventListener","Card","Component"],"mappings":"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","file":"static/js/72.f7a3dd18.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nexport const getContactById = id => {\r\n  return axios.get(\"/api/chat/contacts\", { data: id });\r\n};\r\nexport const getRecentContact = id => {\r\n  return axios.get(\"/api/chat/contacts/recent\", { data: id });\r\n};\r\nexport const getAllContact = currentUserId => {\r\n  return axios.get(\"/api/chat/contacts/all\", { data: currentUserId });\r\n};\r\nexport const getChatRoomByContactId = (currentUser, contactId) => {\r\n  return axios.get(\"/api/chat/chat-room\", { data: { currentUser, contactId } });\r\n};\r\nexport const deleteMessage = message => {\r\n  return axios.post(\"/api/chat/delete\", message);\r\n};\r\nexport const sendNewMessage = message => {\r\n  return axios.post(\"/api/chat/add\", message);\r\n};\r\nexport const updateMessage = message => {\r\n  return axios.post(\"/api/chat/update\", message);\r\n};\r\n","import React, { useState } from \"react\";\r\n// import ChatAvatar from \"./ChatAvatar\";\r\nimport Scrollbar from \"react-perfect-scrollbar\";\r\n// import { Divider } from \"@material-ui/core\";\r\nimport { format } from \"date-fns\";\r\n\r\nconst ChatSidenav = ({\r\n  open,\r\n  currentUser,\r\n  contactList = [],\r\n  recentContactList = [],\r\n  handleContactClick,\r\n  toggleSidenav\r\n}) => {\r\n  const [query, setQuery] = useState(\"\");\r\n\r\n  return (\r\n    <div\r\n      className=\"chat-sidebar-wrap sidebar\"\r\n      style={{ left: !open ? \"-260px\" : 0 }}\r\n    >\r\n      <div className=\"border-right\">\r\n        <div className=\"pt-2 pb-2 pl-3 pr-3 d-flex align-items-center o-hidden box-shadow-1 chat-topbar\">\r\n          <span className=\"link-icon d-md-none\" onClick={toggleSidenav}>\r\n            <i className=\"icon-regular ml-0 mr-3 i-Left\"></i>\r\n          </span>\r\n          <div className=\"form-group m-0 flex-grow-1\">\r\n            <input\r\n              type=\"text\"\r\n              className=\"form-control form-control-rounded\"\r\n              id=\"search\"\r\n              placeholder=\"Search contacts\"\r\n              value={query}\r\n              onChange={({ target: { value } }) => setQuery(value)}\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        <Scrollbar className=\"contacts-scrollable\">\r\n          <div className=\"mt-4 pb-2 pl-3 pr-3 font-weight-bold text-muted border-bottom\">\r\n            Recent\r\n          </div>\r\n\r\n          {recentContactList\r\n            .filter(user =>\r\n              user.name.toLocaleLowerCase().match(query.toLocaleLowerCase())\r\n            )\r\n            .map(user => (\r\n              <div\r\n                key={user.id}\r\n                onClick={() => handleContactClick(user.id)}\r\n                className={`p-3 d-flex align-items-center border-bottom contact ${user.status}`}\r\n              >\r\n                <img\r\n                  src={user.avatar}\r\n                  className=\"avatar-sm rounded-circle mr-3\"\r\n                  alt=\"\"\r\n                />\r\n                <div>\r\n                  <h6 className=\"m-0\">{user.name}</h6>\r\n                  <span className=\"text-muted text-small\">\r\n                    {format(\r\n                      new Date(user.lastChatTime).getTime(),\r\n                      \"dd MMM, yyyy\"\r\n                    )}\r\n                  </span>\r\n                </div>\r\n              </div>\r\n            ))}\r\n\r\n          <div className=\"mt-3 pb-2 pl-3 pr-3 font-weight-bold text-muted border-bottom\">\r\n            Contacts\r\n          </div>\r\n          {contactList\r\n            .filter(user =>\r\n              user.name.toLocaleLowerCase().match(query.toLocaleLowerCase())\r\n            )\r\n            .map(user => (\r\n              <div\r\n                key={user.id}\r\n                onClick={() => handleContactClick(user.id)}\r\n                className=\"p-3 d-flex border-bottom align-items-center contact online\"\r\n              >\r\n                <img\r\n                  src={user.avatar}\r\n                  className=\"avatar-sm rounded-circle mr-3\"\r\n                  alt=\"\"\r\n                />\r\n                <h6 className=\"\">{user.name}</h6>\r\n              </div>\r\n            ))}\r\n        </Scrollbar>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatSidenav;\r\n","import React from \"react\";\r\n\r\nconst EmptyMessage = () => {\r\n  return (\r\n    <div className=\"d-flex flex-column justify-content-center align-items-center h-100\">\r\n      <div\r\n        className=\"card bg-white d-flex justify-content-center align-items-center\"\r\n        style={{\r\n          height: \"220px\",\r\n          width: \"220px\",\r\n          borderRadius: \"50%\"\r\n        }}\r\n      >\r\n        <i className=\"i-Mail-Reply text-64 text-primary font-weight-900\"> </i>\r\n      </div>\r\n      <p className=\"py-3\">Click on a contact to start chat</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EmptyMessage;\r\n","import React from \"react\";\r\nimport Scrollbar from \"react-perfect-scrollbar\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport { getTimeDifference } from \"@utils\";\r\nimport EmptyMessage from \"./EmptyMessage\";\r\n\r\nconst ChatContainer = ({\r\n  currentUser = {},\r\n  toggleSidenav,\r\n  currentChatRoom,\r\n  opponentUser = {},\r\n  messageList = [],\r\n  setBottomRef,\r\n  handleMessageSend,\r\n  isMobile\r\n}) => {\r\n  let [message, setMessage] = React.useState(\"\");\r\n  const sendMessageOnEnter = event => {\r\n    if (event.key === \"Enter\" && !event.shiftKey) {\r\n      message = message.trim();\r\n      if (message !== \"\") handleMessageSend(message);\r\n      setMessage(\"\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className=\"chat-content-wrap sidebar-content\"\r\n      style={{ marginLeft: isMobile ? 0 : \"260px\" }}\r\n    >\r\n      <div className=\"d-flex pl-3 pr-3 pt-2 pb-2 o-hidden box-shadow-1 chat-topbar\">\r\n        <span className=\"link-icon d-md-none\" onClick={toggleSidenav}>\r\n          <i className=\"icon-regular i-Right ml-0 mr-3\"></i>\r\n        </span>\r\n        {opponentUser && (\r\n          <div className=\"d-flex align-items-center\">\r\n            <img\r\n              src={opponentUser.avatar}\r\n              alt=\"\"\r\n              className=\"avatar-sm rounded-circle mr-2\"\r\n            />\r\n            <p className=\"m-0 text-title text-16 flex-grow-1\">\r\n              {opponentUser.name}\r\n            </p>\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      {opponentUser ? (\r\n        <>\r\n          <Scrollbar\r\n            className=\"chat-content\"\r\n            containerRef={ref => {\r\n              setBottomRef(ref);\r\n            }}\r\n          >\r\n            {messageList.map((item, ind) =>\r\n              item.contactId === opponentUser.id ? (\r\n                <div key={ind} className=\"d-flex mb-4\">\r\n                  <div className=\"message flex-grow-1\">\r\n                    <div className=\"d-flex\">\r\n                      <p className=\"mb-1 text-title text-16 flex-grow-1\">\r\n                        {item.name}\r\n                      </p>\r\n                      <span className=\"text-small text-muted\">\r\n                        {getTimeDifference(new Date(item.time))} ago\r\n                      </span>\r\n                    </div>\r\n                    <p className=\"m-0 white-space-pre-line\">{item.text}</p>\r\n                  </div>\r\n                  <img\r\n                    src={item.avatar}\r\n                    alt=\"\"\r\n                    className=\"avatar-sm rounded-circle ml-3\"\r\n                  />\r\n                </div>\r\n              ) : (\r\n                <div key={ind} className=\"d-flex mb-4 user\">\r\n                  <img\r\n                    src={item.avatar}\r\n                    alt=\"\"\r\n                    className=\"avatar-sm rounded-circle ml-3\"\r\n                  />\r\n                  <div className=\"message flex-grow-1\">\r\n                    <div className=\"d-flex\">\r\n                      <p className=\"mb-1 text-title text-16 flex-grow-1\">\r\n                        {item.name}\r\n                      </p>\r\n                      <span className=\"text-small text-muted\">\r\n                        {getTimeDifference(new Date(item.time))} ago\r\n                      </span>\r\n                    </div>\r\n                    <p className=\"m-0 white-space-pre-line\">{item.text}</p>\r\n                  </div>\r\n                </div>\r\n              )\r\n            )}\r\n          </Scrollbar>\r\n          <div className=\"pl-3 pr-3 pt-3 pb-3 box-shadow-1 chat-input-area\">\r\n            <form className=\"inputForm\">\r\n              <div className=\"form-group\">\r\n                <textarea\r\n                  className=\"form-control form-control-rounded\"\r\n                  placeholder=\"Type your message\"\r\n                  name=\"message\"\r\n                  id=\"message\"\r\n                  cols=\"30\"\r\n                  rows=\"3\"\r\n                  onChange={e => setMessage(e.target.value)}\r\n                  onKeyUp={sendMessageOnEnter}\r\n                  value={message}\r\n                ></textarea>\r\n              </div>\r\n              <div className=\"d-flex\">\r\n                <div className=\"flex-grow-1\"></div>\r\n                <Button\r\n                  className=\"btn btn-icon btn-rounded mr-2\"\r\n                  variant=\"primary\"\r\n                  onClick={() => {\r\n                    if (message.trim() !== \"\") handleMessageSend(message);\r\n                    setMessage(\"\");\r\n                  }}\r\n                >\r\n                  <i className=\"i-Paper-Plane\"></i>\r\n                </Button>\r\n\r\n                <label htmlFor=\"attachment\" className=\"mb-0\">\r\n                  <Button\r\n                    type=\"button\"\r\n                    className=\"mr-2\"\r\n                    as=\"span\"\r\n                    variant=\"outline-primary\"\r\n                  >\r\n                    <i className=\"i-Add-File\"></i>\r\n                  </Button>\r\n                </label>\r\n                <input\r\n                  onChange={event => {\r\n                    console.log(event.target.files[0]);\r\n                  }}\r\n                  className=\"d-none\"\r\n                  id=\"attachment\"\r\n                  type=\"file\"\r\n                />\r\n              </div>\r\n            </form>\r\n          </div>\r\n        </>\r\n      ) : (\r\n        <EmptyMessage></EmptyMessage>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatContainer;\r\n","import React, { Component } from \"react\";\r\nimport { Card } from \"react-bootstrap\";\r\nimport {\r\n  getAllContact,\r\n  getRecentContact,\r\n  sendNewMessage,\r\n  getContactById,\r\n  getChatRoomByContactId\r\n} from \"./chatService\";\r\nimport ChatSidenav from \"./ChatSidenav\";\r\nimport ChatContainer from \"./ChatContainer\";\r\nimport { isMobile } from \"@utils\";\r\n\r\nclass AppChat extends Component {\r\n  state = {\r\n    currentUser: {\r\n      id: \"7863a6802ez0e277a0f98534\"\r\n    },\r\n    contactList: [],\r\n    recentContactList: [],\r\n    messageList: [],\r\n    currentChatRoom: \"\",\r\n    opponentUser: null,\r\n    open: true,\r\n    isMobile: false\r\n  };\r\n\r\n  bottomRef = React.createRef();\r\n  windowResizeListener;\r\n\r\n  componentDidMount() {\r\n    let { id } = this.state.currentUser;\r\n    getContactById(id).then(data => {\r\n      this.setState({\r\n        currentUser: {\r\n          ...data.data\r\n        }\r\n      });\r\n    });\r\n    getAllContact(this.state.currentUser.id).then(data =>\r\n      this.setState({ contactList: [...data.data] })\r\n    );\r\n    this.updateRecentContactList();\r\n\r\n    if (isMobile())\r\n      this.setState({\r\n        open: false,\r\n        isMobile: true\r\n      });\r\n    if (window)\r\n      this.windowResizeListener = window.addEventListener(\"resize\", e => {\r\n        if (isMobile())\r\n          this.setState({\r\n            open: false,\r\n            isMobile: true\r\n          });\r\n        else\r\n          this.setState({\r\n            open: true,\r\n            isMobile: false\r\n          });\r\n      });\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    if (window) window.removeEventListener(\"resize\", this.windowResizeListener);\r\n  }\r\n\r\n  updateRecentContactList = () => {\r\n    let { id } = this.state.currentUser;\r\n    getRecentContact(id).then(data => {\r\n      this.setState({\r\n        recentContactList: [...data.data]\r\n      });\r\n    });\r\n  };\r\n\r\n  scrollToBottom = () => {\r\n    this.bottomRef.current.scrollIntoView({ behavior: \"smooth\" });\r\n  };\r\n\r\n  handleContactClick = contactId => {\r\n    if (isMobile()) this.toggleSidenav();\r\n\r\n    getContactById(contactId).then(({ data }) => {\r\n      this.setState({\r\n        opponentUser: { ...data }\r\n      });\r\n    });\r\n\r\n    getChatRoomByContactId(this.state.currentUser.id, contactId).then(\r\n      ({ data }) => {\r\n        let { chatId, messageList, recentListUpdated } = data;\r\n        console.log(chatId);\r\n\r\n        this.setState(\r\n          {\r\n            currentChatRoom: chatId,\r\n            messageList\r\n          },\r\n          () => {\r\n            this.bottomRef.scrollTop = 9999999999999;\r\n          }\r\n        );\r\n        if (recentListUpdated) {\r\n          this.updateRecentContactList();\r\n        }\r\n      }\r\n    );\r\n  };\r\n\r\n  handleMessageSend = message => {\r\n    let { id } = this.state.currentUser;\r\n    let { currentChatRoom, opponentUser } = this.state;\r\n    if (currentChatRoom === \"\") return;\r\n    sendNewMessage({\r\n      chatId: currentChatRoom,\r\n      text: message,\r\n      contactId: id,\r\n      time: new Date()\r\n    }).then(data => {\r\n      this.setState(\r\n        {\r\n          messageList: [...data.data]\r\n        },\r\n        () => {\r\n          this.bottomRef.scrollTop = 9999999999999;\r\n        }\r\n      );\r\n\r\n      // bot message\r\n      setTimeout(() => {\r\n        sendNewMessage({\r\n          chatId: currentChatRoom,\r\n          text: `Hi, I'm ${opponentUser.name}. Your imaginary friend.`,\r\n          contactId: opponentUser.id,\r\n          time: new Date()\r\n        }).then(data => {\r\n          this.setState(\r\n            {\r\n              messageList: [...data.data]\r\n            },\r\n            () => {\r\n              this.bottomRef.scrollTop = 9999999999999;\r\n            }\r\n          );\r\n        });\r\n      }, 750);\r\n      // bot message ends here\r\n    });\r\n  };\r\n\r\n  setBottomRef = ref => {\r\n    this.bottomRef = ref;\r\n  };\r\n\r\n  toggleSidenav = () => this.setState({ open: !this.state.open });\r\n\r\n  render() {\r\n    let {\r\n      open,\r\n      isMobile,\r\n      currentUser,\r\n      contactList,\r\n      recentContactList,\r\n      messageList,\r\n      opponentUser,\r\n      currentChatRoom\r\n    } = this.state;\r\n    return (\r\n      <Card className=\"chat-sidebar-container sidebar-container\">\r\n        <ChatSidenav\r\n          open={open}\r\n          isMobile={isMobile}\r\n          toggleSidenav={this.toggleSidenav}\r\n          contactList={contactList}\r\n          recentContactList={recentContactList}\r\n          handleContactClick={this.handleContactClick}\r\n        ></ChatSidenav>\r\n        <ChatContainer\r\n          open={open}\r\n          isMobile={isMobile}\r\n          toggleSidenav={this.toggleSidenav}\r\n          messageList={messageList}\r\n          currentUser={currentUser}\r\n          opponentUser={opponentUser}\r\n          currentChatRoom={currentChatRoom}\r\n          setBottomRef={this.setBottomRef}\r\n          handleMessageSend={this.handleMessageSend}\r\n        ></ChatContainer>\r\n      </Card>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AppChat;\r\n"],"sourceRoot":""}