{"version":3,"sources":["app/views/monCompte/MonCompte.jsx"],"names":["MonCompte","props","handleSubmit","values","console","log","updateProfile","state","nom","telephone","email","prevProps","prevState","this","profile","displayName","className","onSubmit","classList","htmlFor","type","id","placeholder","name","value","required","aria-describedby","defaultCountry","onClick","Component","yup","shape","prenom","city","zip","agree","firstName","lastName","username"],"mappings":"oPAYMA,G,wDACJ,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAeRC,aAAe,SAACC,GACdC,QAAQC,IAAIF,GACZ,EAAKF,MAAMK,cAAcH,IAfzB,EAAKI,MAAQ,CACTC,IAAK,GACLC,UAAW,GACXC,MAAO,IANM,E,qDASnB,c,gCAKA,SAAmBC,EAAWC,M,oBAO9B,WACER,QAAQC,IAAI,QAASQ,KAAKZ,OAC1B,MAAwCY,KAAKZ,MAAMa,QAA7CC,EAAN,EAAMA,YAAaL,EAAnB,EAAmBA,MAAOD,EAA1B,EAA0BA,UAU1B,OARII,KAAKZ,MAAMa,SACI,CACfN,IAAKO,EACLN,UAAWA,EACXC,MAAOA,GAKT,6BACE,yBAAKM,UAAU,OACb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,aACZH,KAAKZ,MAAMa,SAEJ,0BACEE,UAAU,mBACVC,SAAUJ,KAAKX,cAGf,yBAAKc,UAAU,YACb,yBACEA,UAAWE,YAAU,CACnB,iBAAiB,KAKnB,2BAAOC,QAAQ,uBAAf,aAGA,2BACEC,KAAK,OACLJ,UAAU,eACVK,GAAG,sBACHC,YAAY,MACZC,KAAK,MACLC,MAAOT,EAEPU,UAAQ,IAEV,yBAAKT,UAAU,kBAAf,gBACA,yBAAKA,UAAU,oBAAf,iCAKF,yBACEA,UAAWE,YAAU,CACnB,iBAAiB,KAKnB,2BAAOC,QAAQ,4BAAf,SAGA,yBAAKH,UAAU,eACb,yBAAKA,UAAU,uBACb,0BACEA,UAAU,mBACVK,GAAG,qBAFL,MAOF,2BACED,KAAK,QACLJ,UAAU,eACVK,GAAG,2BACHC,YAAY,WACZI,mBAAiB,oBACjBH,KAAK,QACLC,MAAOd,EACPe,UAAQ,IAEV,yBAAKT,UAAU,oBAAf,kCAMN,yBAAKA,UAAU,YACb,yBACEA,UAAWE,YAAU,CACnB,aAAa,KAOf,2BAAOC,QAAQ,uBAAf,mBAGA,kBAAC,IAAD,CACEH,UAAU,eACVW,eAAe,KACfN,GAAG,YACHG,MAAOf,EACPc,KAAK,cAIP,yBAAKP,UAAU,sBAInB,4BACEA,UAAU,kBACVI,KAAK,SACLQ,QAASf,KAAKX,cAHhB,yB,GAvIF2B,cA2JAC,WAAaC,MAAM,CACzCC,OAAQF,WAAaL,SAAS,0BAC9BjB,IAAKsB,WAAaL,SAAS,yBAC3Bf,MAAOoB,WAAaL,SAAS,qBAC7BQ,KAAMH,WAAaL,SAAS,wBAC5BS,IAAKJ,WAAaL,SAAS,qBAC3BU,MAAOL,WAAaL,SAAS,YAC7BlB,MAAOuB,WAAaL,SAAS,cAGLK,WAAaC,MAAM,CAC3CK,UAAWN,WAAaL,SAAS,0BACjCY,SAAUP,WAAaL,SAAS,yBAChCa,SAAUR,WAAaL,SAAS,qBAChCQ,KAAMH,WAAaL,SAAS,wBAC5BS,IAAKJ,WAAaL,SAAS,qBAC3BU,MAAOL,WAAaL,SAAS,YAC7BlB,MAAOuB,WAAaL,SAAS,cAIhBzB","file":"static/js/115.365571bb.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Breadcrumb } from \"@gull\";\r\nimport { Formik, setFieldValue } from \"formik\";\r\nimport * as yup from \"yup\";\r\nimport { classList } from \"@utils\";\r\nimport { compose, lifecycle } from \"recompose\";\r\nimport { firestoreConnect, isEmpty, isLoaded } from \"react-redux-firebase\";\r\nimport { connect } from \"react-redux\";\r\nimport AlgoliaPlaces from \"algolia-places-react\";\r\nimport PhoneInput from \"react-phone-number-input/input\";\r\nimport { updateProfile } from \"app/redux/actions/UserActions\";\r\n\r\nclass MonCompte extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    // Don't call this.setState() here!\r\n    this.state = {\r\n        nom: \"\",\r\n        telephone: \"\",\r\n        email: \"\",\r\n    };\r\n  }\r\n  componentDidMount() {\r\n\r\n    \r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState) {}\r\n  \r\n  handleSubmit = (values) => {\r\n    console.log(values);\r\n    this.props.updateProfile(values);\r\n  };\r\n\r\n  render() {\r\n    console.log(\"state\", this.props);\r\n    let { displayName, email, telephone } = this.props.profile\r\n    let initFormValues={};\r\n    if (this.props.profile) {\r\n      initFormValues = {\r\n        nom: displayName,\r\n        telephone: telephone,\r\n        email: email,\r\n      };\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        <div className=\"row\">\r\n          <div className=\"col-md-12\">\r\n            <div className=\"card mb-4\">\r\n              <div className=\"card-body\">\r\n                {this.props.profile && (\r\n                \r\n                        <form\r\n                          className=\"needs-validation\"\r\n                          onSubmit={this.handleSubmit}\r\n                         \r\n                        >\r\n                          <div className=\"form-row\">\r\n                            <div\r\n                              className={classList({\r\n                                \"col-md-6 mb-3\": true,\r\n                               // \"valid-field\": !errors.nom && touched.nom,\r\n                               // \"invalid-field\": errors.nom && touched.nom,\r\n                              })}\r\n                            >\r\n                              <label htmlFor=\"validationCustom202\">\r\n                                Prénom\r\n                              </label>\r\n                              <input\r\n                                type=\"text\"\r\n                                className=\"form-control\"\r\n                                id=\"validationCustom202\"\r\n                                placeholder=\"Nom\"\r\n                                name=\"nom\"\r\n                                value={displayName}\r\n                              \r\n                                required\r\n                              />\r\n                              <div className=\"valid-feedback\">Enchanté!</div>\r\n                              <div className=\"invalid-feedback\">\r\n                                Le prénom est obligatoire\r\n                              </div>\r\n                            </div>\r\n\r\n                            <div\r\n                              className={classList({\r\n                                \"col-md-6 mb-3\": true,\r\n                                //\"valid-field\": touched.email && !errors.email,\r\n                                //\"invalid-field\": touched.email && errors.email,\r\n                              })}\r\n                            >\r\n                              <label htmlFor=\"validationCustomUsername\">\r\n                                Email\r\n                              </label>\r\n                              <div className=\"input-group\">\r\n                                <div className=\"input-group-prepend\">\r\n                                  <span\r\n                                    className=\"input-group-text\"\r\n                                    id=\"inputGroupPrepend\"\r\n                                  >\r\n                                    @\r\n                                  </span>\r\n                                </div>\r\n                                <input\r\n                                  type=\"email\"\r\n                                  className=\"form-control\"\r\n                                  id=\"validationCustomUsername\"\r\n                                  placeholder=\"Courriel\"\r\n                                  aria-describedby=\"inputGroupPrepend\"\r\n                                  name=\"email\"\r\n                                  value={email}\r\n                                  required\r\n                                />\r\n                                <div className=\"invalid-feedback\">\r\n                                  Le courriel est obligatoire\r\n                                </div>\r\n                              </div>\r\n                            </div>\r\n                          </div>\r\n                          <div className=\"form-row\">\r\n                            <div\r\n                              className={classList({\r\n                                \"col-md-12\": true,\r\n                                //\"valid-field\":\r\n                                  //touched.telephone && !errors.telephone,\r\n                               // \"invalid-field\":\r\n                                 // touched.telephone && errors.telephone,\r\n                              })}\r\n                            >\r\n                              <label htmlFor=\"validationCustom203\">\r\n                                Téléphone\r\n                              </label>\r\n                              <PhoneInput\r\n                                className=\"form-control\"\r\n                                defaultCountry=\"CA\"\r\n                                id=\"telephone\"\r\n                                value={telephone}\r\n                                name=\"telephone\"\r\n                                \r\n                              />\r\n\r\n                              <div className=\"invalid-tooltip\"></div>\r\n                            </div>\r\n                          </div>\r\n\r\n                          <button\r\n                            className=\"btn btn-primary\"\r\n                            type=\"submit\"\r\n                            onClick={this.handleSubmit}\r\n                          >\r\n                            Enregistrer\r\n                          </button>\r\n                        </form>\r\n                   \r\n               \r\n                )}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst basicFormSchema = yup.object().shape({\r\n  prenom: yup.string().required(\"first name is required\"),\r\n  nom: yup.string().required(\"last name is required\"),\r\n  email: yup.string().required(\"select any option\"),\r\n  city: yup.string().required(\"birthDay is required\"),\r\n  zip: yup.number().required(\"email is required\"),\r\n  agree: yup.string().required(\"Required\"),\r\n  state: yup.string().required(\"Required\"),\r\n});\r\n\r\nconst tooltipFormSchema = yup.object().shape({\r\n  firstName: yup.string().required(\"first name is required\"),\r\n  lastName: yup.string().required(\"last name is required\"),\r\n  username: yup.string().required(\"select any option\"),\r\n  city: yup.string().required(\"birthDay is required\"),\r\n  zip: yup.number().required(\"email is required\"),\r\n  agree: yup.string().required(\"Required\"),\r\n  state: yup.string().required(\"Required\"),\r\n});\r\n\r\n\r\nexport default(MonCompte);\r\n"],"sourceRoot":""}