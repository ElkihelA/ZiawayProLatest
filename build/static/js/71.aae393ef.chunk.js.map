{"version":3,"sources":["app/views/app/calendar/CalendarService.js","app/views/app/calendar/CalendarEventDialog.jsx","app/views/app/calendar/AppCalendar.jsx"],"names":["addNewEvent","event","axios","post","updateEvent","deleteEvent","eventSchema","yup","shape","title","required","start","CalendarEventDialog","open","eventObject","handleSubmit","handleDeleteEvent","closeDialog","Modal","show","centered","size","className","style","maxWidth","onHide","enableReinitialize","initialValues","onSubmit","values","validationSchema","errors","touched","handleChange","handleBlur","setFieldValue","isSubmitting","setSubmitting","Card","Header","onClick","Body","Form","FormGroup","FormLabel","FormControl","type","name","onChange","onBlur","value","isInvalid","Row","as","Col","dateFormat","selected","Date","date","end","allDay","checked","color","onChangeComplete","hex","Button","variant","id","AppCalendar","calendarComponentRef","React","createRef","externalEventRef","state","eventDialogOpen","calendarEvents","newEventInput","deleteEventOnDrop","externalEvents","toggleWeekends","setState","calendarWeekends","gotoPast","current","getApi","gotoDate","handleDateClick","arg","classNames","handleEventDrop","a","backgroundColor","extendedProps","eventList","data","refreshFullCalendar","handleExternalEventDrop","draggedEl","innerText","classList","handleEventDialogSubmit","concat","filter","item","match","toggleEventDialog","handleEventClick","target","key","trim","map","e","get","then","draggableEl","this","Draggable","itemSelector","eventData","eventEl","shortid","generate","create","routeSegments","path","htmlFor","placeholder","onKeyUp","ref","ind","defaultView","header","left","center","right","themeSystem","displayEventTime","droppable","editable","eventLimit","plugins","dayGridPlugin","timeGridPlugin","interactionPlugin","weekends","events","dateClick","eventDrop","eventResize","eventClick","drop","Component"],"mappings":"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","file":"static/js/71.aae393ef.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nexport const getAllEvents = () => {\r\n    return axios.get(\"/api/calendar/events/all\");\r\n}\r\n\r\nexport const addNewEvent = (event) => {\r\n    return axios.post(\"/api/calendar/events/add\",event);\r\n}\r\n\r\nexport const updateEvent = (event) => {\r\n    return axios.post(\"/api/calendar/events/update\",event);\r\n}\r\n\r\nexport const deleteEvent = (event) => {\r\n    return axios.post(\"/api/calendar/events/delete\",event);\r\n}","import React from \"react\";\r\nimport {\r\n  Modal,\r\n  Form,\r\n  FormGroup,\r\n  FormLabel,\r\n  FormControl,\r\n  Col,\r\n  Card,\r\n  Button\r\n} from \"react-bootstrap\";\r\nimport { Formik } from \"formik\";\r\nimport DatePicker from \"react-datepicker\";\r\nimport { CirclePicker } from \"react-color\";\r\nimport * as yup from \"yup\";\r\n\r\nconst CalendarEventDialog = ({\r\n  open,\r\n  eventObject,\r\n  handleSubmit,\r\n  handleDeleteEvent,\r\n  closeDialog\r\n}) => {\r\n  const handleFormSubmit = values => {\r\n    handleSubmit(values);\r\n  };\r\n\r\n  return (\r\n    <Modal\r\n      show={open}\r\n      centered={true}\r\n      size=\"lg\"\r\n      className=\"d-flex justify-content-center mx-auto\"\r\n      style={{ maxWidth: \"500px\" }}\r\n      onHide={closeDialog}\r\n    >\r\n      <Formik\r\n        enableReinitialize={true}\r\n        initialValues={eventObject}\r\n        onSubmit={handleFormSubmit}\r\n        validationSchema={eventSchema}\r\n      >\r\n        {({\r\n          values,\r\n          errors,\r\n          touched,\r\n          handleChange,\r\n          handleBlur,\r\n          handleSubmit,\r\n          isSubmitting,\r\n          setSubmitting,\r\n          setFieldValue\r\n        }) => {\r\n          return (\r\n            <Card>\r\n              <Card.Header className=\"bg-primary text-white d-flex flex-wrap justify-content-between align-items-center\">\r\n                <h4 className=\"m-0 text-white\">New Event</h4>\r\n                <i\r\n                  className=\"i-Close-Window cursor-pointer text-18\"\r\n                  onClick={closeDialog}\r\n                ></i>\r\n              </Card.Header>\r\n              <Card.Body>\r\n                <Form onSubmit={handleSubmit}>\r\n                  <FormGroup>\r\n                    <FormLabel>Title</FormLabel>\r\n                    <FormControl\r\n                      type=\"text\"\r\n                      name=\"title\"\r\n                      className=\"mb-3\"\r\n                      onChange={handleChange}\r\n                      onBlur={handleBlur}\r\n                      value={values.title}\r\n                      isInvalid={errors.title && touched.title}\r\n                    />\r\n                  </FormGroup>\r\n                  <Form.Row>\r\n                    <FormGroup as={Col}>\r\n                      <FormLabel>Start Date</FormLabel>\r\n                      <DatePicker\r\n                        className=\"form-control mb-1 w-100\"\r\n                        dateFormat=\"dd/MM/yyyy\"\r\n                        selected={\r\n                          values.start ? new Date(values.start) : new Date()\r\n                        }\r\n                        onChange={date => {\r\n                          setFieldValue(\"start\", date);\r\n                        }}\r\n                      />\r\n                    </FormGroup>\r\n                    <FormGroup as={Col}>\r\n                      <FormLabel>End Date</FormLabel>\r\n                      <DatePicker\r\n                        className=\"form-control mb-1\"\r\n                        dateFormat=\"dd/MM/yyyy\"\r\n                        selected={\r\n                          values.end ? new Date(values.end) : new Date()\r\n                        }\r\n                        onChange={date => {\r\n                          setFieldValue(\"end\", date);\r\n                        }}\r\n                      />\r\n                    </FormGroup>\r\n                  </Form.Row>\r\n                  <p>\r\n                    <label className=\"checkbox checkbox-primary\">\r\n                      <input\r\n                        type=\"checkbox\"\r\n                        name=\"allDay\"\r\n                        value={values.allDay}\r\n                        checked={values.allDay}\r\n                        onChange={handleChange}\r\n                        onBlur={handleBlur}\r\n                        // required\r\n                      />\r\n                      <span>All day</span>\r\n                      <span className=\"checkmark\"></span>\r\n                    </label>\r\n                  </p>\r\n                  <CirclePicker\r\n                    className=\"w-100 mb-4\"\r\n                    color={values.color}\r\n                    onChangeComplete={({ hex }) => setFieldValue(\"color\", hex)}\r\n                  />\r\n                  <div className=\"d-flex justify-content-between\">\r\n                    <Button type=\"submit\" variant=\"primary\">\r\n                      Save\r\n                    </Button>\r\n                    <Button\r\n                      type=\"button\"\r\n                      variant=\"danger\"\r\n                      onClick={() => handleDeleteEvent(values.id)}\r\n                    >\r\n                      <i className=\"i-Delete-File\"> </i>\r\n                      Delete\r\n                    </Button>\r\n                  </div>\r\n                </Form>\r\n              </Card.Body>\r\n            </Card>\r\n          );\r\n        }}\r\n      </Formik>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nconst eventSchema = yup.object().shape({\r\n  title: yup.string().required(\"Title is required\"),\r\n  start: yup.string().required(\"Start date is required\")\r\n});\r\n\r\nexport default CalendarEventDialog;\r\n","import React, { Component } from \"react\";\r\nimport { Breadcrumb } from \"@gull\";\r\nimport FullCalendar from \"@fullcalendar/react\";\r\nimport dayGridPlugin from \"@fullcalendar/daygrid\";\r\nimport timeGridPlugin from \"@fullcalendar/timegrid\";\r\nimport interactionPlugin, { Draggable } from \"@fullcalendar/interaction\"; // needed for dayClick\r\nimport {\r\n  getAllEvents,\r\n  addNewEvent,\r\n  updateEvent,\r\n  deleteEvent\r\n} from \"./CalendarService\";\r\nimport shortid from \"shortid\";\r\nimport CalendarEventDialog from \"./CalendarEventDialog\";\r\n\r\nclass AppCalendar extends Component {\r\n  calendarComponentRef = React.createRef();\r\n  externalEventRef = React.createRef();\r\n\r\n  state = {\r\n    eventDialogOpen: false,\r\n    calendarEvents: [],\r\n    eventObject: {},\r\n    newEventInput: \"\",\r\n    deleteEventOnDrop: false,\r\n    externalEvents: [\r\n      { title: \"Hello world\" },\r\n      { title: \"Payment schedule\" },\r\n      { title: \"Go to shopping\" },\r\n      { title: \"Rend due\" },\r\n      { title: \"Car rent\" }\r\n    ]\r\n  };\r\n\r\n  toggleWeekends = () => {\r\n    this.setState({\r\n      calendarWeekends: !this.state.calendarWeekends\r\n    });\r\n  };\r\n\r\n  gotoPast = () => {\r\n    let calendarApi = this.calendarComponentRef.current.getApi();\r\n    calendarApi.gotoDate(\"2000-01-01\"); // call a method on the Calendar object\r\n  };\r\n\r\n  handleDateClick = arg => {\r\n    this.setState({\r\n      eventDialogOpen: true,\r\n      eventObject: {\r\n        title: \"\",\r\n        start: arg.date,\r\n        allDay: arg.allDay,\r\n        classNames: [\"text-white\"]\r\n      }\r\n    });\r\n  };\r\n\r\n  handleEventDrop = async ({\r\n    event: {\r\n      id,\r\n      start,\r\n      end,\r\n      title,\r\n      allDay,\r\n      classNames,\r\n      backgroundColor,\r\n      extendedProps\r\n    }\r\n  }) => {\r\n    let { data: eventList } = await updateEvent({\r\n      id,\r\n      start,\r\n      end,\r\n      title,\r\n      allDay,\r\n      classNames,\r\n      color: backgroundColor\r\n    });\r\n\r\n    this.refreshFullCalendar(eventList);\r\n  };\r\n\r\n  handleExternalEventDrop = event => {\r\n    let {\r\n      date: start,\r\n      allDay,\r\n      draggedEl: {\r\n        innerText: title,\r\n        classList: { value: classNames }\r\n      }\r\n    } = event;\r\n\r\n    this.handleEventDialogSubmit({\r\n      start,\r\n      title,\r\n      allDay,\r\n      classNames: classNames.concat(\" text-white\")\r\n    });\r\n\r\n    let { externalEvents = [], deleteEventOnDrop } = this.state;\r\n\r\n    if (!deleteEventOnDrop) return;\r\n\r\n    this.setState({\r\n      externalEvents: externalEvents.filter(item => !item.title.match(title))\r\n    });\r\n  };\r\n\r\n  handleDeleteEvent = async id => {\r\n    if (!id) return;\r\n    let { data: eventList } = await deleteEvent({ id });\r\n    this.refreshFullCalendar(eventList);\r\n  };\r\n\r\n  toggleEventDialog = () => {\r\n    this.setState({ eventDialogOpen: !this.state.eventDialogOpen });\r\n  };\r\n\r\n  handleEventDialogSubmit = async eventObject => {\r\n    let eventList = [];\r\n\r\n    if (eventObject.id) {\r\n      let { data } = await updateEvent(eventObject);\r\n      eventList = data;\r\n    } else {\r\n      let { data } = await addNewEvent(eventObject);\r\n      eventList = data;\r\n    }\r\n\r\n    this.refreshFullCalendar(eventList);\r\n  };\r\n\r\n  handleEventClick = ({\r\n    event: {\r\n      id,\r\n      start,\r\n      end,\r\n      title,\r\n      allDay,\r\n      classNames,\r\n      backgroundColor,\r\n      extendedProps\r\n    }\r\n  }) => {\r\n    this.setState({\r\n      eventDialogOpen: true,\r\n      eventObject: {\r\n        id,\r\n        title,\r\n        start,\r\n        end,\r\n        allDay,\r\n        classNames,\r\n        color: backgroundColor\r\n      }\r\n    });\r\n  };\r\n\r\n  handleChange = event => {\r\n    let title = event.target.value;\r\n    if (event.key === \"Enter\") {\r\n      title = title.trim();\r\n      if (title !== \"\") {\r\n        this.setState({\r\n          externalEvents: [...this.state.externalEvents, { title }],\r\n          newEventInput: \"\"\r\n        });\r\n      }\r\n    } else {\r\n      this.setState({ newEventInput: title });\r\n    }\r\n  };\r\n\r\n  refreshFullCalendar = (eventList = []) => {\r\n    this.setState({\r\n      calendarEvents: eventList.map(e => ({\r\n        start: e.start,\r\n        title: e.title,\r\n        id: e.id,\r\n        end: e.end,\r\n        classNames: e.classNames,\r\n        color: e.color,\r\n        allDay: e.allDay\r\n      })),\r\n      eventDialogOpen: false\r\n    });\r\n  };\r\n\r\n  componentDidMount() {\r\n    getAllEvents().then(({ data }) => {\r\n      if (this.state) this.setState({ calendarEvents: data });\r\n    });\r\n\r\n    let draggableEl = this.externalEventRef.current;\r\n    new Draggable(draggableEl, {\r\n      itemSelector: \".fc-event\",\r\n      eventData: function(eventEl) {\r\n        let title = eventEl.innerText;\r\n        let id = shortid.generate();\r\n        let classNames = eventEl.classList.value + \" text-white\";\r\n        // this.handleEventDialogSubmit({\r\n        //   event: { title, classNames, allDay: true }\r\n        // });\r\n        return { title, id, classNames, create: false };\r\n      }\r\n    });\r\n  }\r\n\r\n  render() {\r\n    let {\r\n      calendarEvents,\r\n      calendarWeekends,\r\n      eventDialogOpen,\r\n      eventObject,\r\n      newEventInput,\r\n      deleteEventOnDrop,\r\n      externalEvents = []\r\n    } = this.state;\r\n\r\n    return (\r\n      <div>\r\n        <Breadcrumb\r\n          routeSegments={[{ name: \"Home\", path: \"/\" }, { name: \"Calendar\" }]}\r\n        ></Breadcrumb>\r\n\r\n        <div className=\"row\">\r\n          <div className=\"col-md-3\">\r\n            <div className=\"card mb-4\">\r\n              <div className=\"card-body\">\r\n                <div className=\"create_event_wrap\">\r\n                  <div className=\"form-group\">\r\n                    <label htmlFor=\"newEvent\"> Create new Event</label>\r\n                    <input\r\n                      type=\"text\"\r\n                      name=\"newEvent\"\r\n                      className=\"form-control\"\r\n                      placeholder=\"new Event\"\r\n                      value={newEventInput}\r\n                      onChange={this.handleChange}\r\n                      onKeyUp={this.handleChange}\r\n                    />\r\n                  </div>\r\n\r\n                  <ul\r\n                    className=\"list-group\"\r\n                    id=\"external-events\"\r\n                    ref={this.externalEventRef}\r\n                  >\r\n                    {externalEvents.map((event, ind) => (\r\n                      <li\r\n                        key={ind}\r\n                        style={{ backgroundColor: \"#f5f5f5\", color: \"#000000\" }}\r\n                        className=\"list-group-item  fc-event\"\r\n                      >\r\n                        {event.title}\r\n                      </li>\r\n                    ))}\r\n                  </ul>\r\n                  <p>\r\n                    <label className=\"checkbox checkbox-primary\">\r\n                      <input\r\n                        type=\"checkbox\"\r\n                        name=\"agree\"\r\n                        value={deleteEventOnDrop}\r\n                        checked={deleteEventOnDrop}\r\n                        onChange={e =>\r\n                          this.setState({ deleteEventOnDrop: e.target.checked })\r\n                        }\r\n                      />\r\n                      <span>Remove after drop</span>\r\n                      <span className=\"checkmark\"></span>\r\n                    </label>\r\n                  </p>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"col-md-9\">\r\n            <div className=\"card mb-4 o-hidden\">\r\n              <div className=\"card-body\">\r\n                <FullCalendar\r\n                  defaultView=\"dayGridMonth\"\r\n                  header={{\r\n                    left: \"prev,next today\",\r\n                    center: \"title\",\r\n                    right: \"dayGridMonth,timeGridWeek,timeGridDay,listWeek\"\r\n                  }}\r\n                  themeSystem=\"bootstrap\"\r\n                  displayEventTime={false}\r\n                  droppable={true}\r\n                  editable={true}\r\n                  eventLimit={true}\r\n                  plugins={[dayGridPlugin, timeGridPlugin, interactionPlugin]}\r\n                  ref={this.calendarComponentRef}\r\n                  weekends={calendarWeekends}\r\n                  events={calendarEvents}\r\n                  dateClick={this.handleDateClick}\r\n                  eventDrop={this.handleEventDrop}\r\n                  eventResize={this.handleEventDrop}\r\n                  eventClick={this.handleEventClick}\r\n                  drop={this.handleExternalEventDrop}\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <CalendarEventDialog\r\n          open={eventDialogOpen}\r\n          closeDialog={this.toggleEventDialog}\r\n          handleSubmit={this.handleEventDialogSubmit}\r\n          eventObject={eventObject}\r\n          handleDeleteEvent={this.handleDeleteEvent}\r\n        ></CalendarEventDialog>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AppCalendar;\r\n"],"sourceRoot":""}